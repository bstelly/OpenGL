#version 410
in vec4 vColor;
uniform vec4 lightColor;
uniform vec3 lightPosition;
uniform vec3 lightDirection;
uniform vec3 cameraPosition;
in vec4 vPosition;
out vec4 FragColor;
void main() 
{ 
	vec4 ambient = lightColor * vColor;
	
	vec3 vertexNormal = normalize(vPosition.xyz);
	float lambert = dot(-lightDirection, vertexNormal);
	
	vec4 diffuse = vColor * lambert * lightColor;
	
	//vec4 specular = 
	
	FragColor = ambient + diffuse;
}

/*#version 410
in vec4 vColor;
uniform vec4 lightColor;
uniform vec3 lightPosition;
uniform vec3 lightDirection;
uniform vec3 cameraPosition;
in vec4 vPosition;
out vec4 FragColor;
void main() 
{ 
	vec4 ambient = lightColor * vColor;

	vec3 vertexNormal = normalize(vPosition.xyz);
	float lambert = dot(-lightDirection, vertexNormal);
	vec4 diffuse = vColor * lambert * lightColor;
	
	vec3 reflectedRay = lightPosition - vPosition.xyz;
	vec3 viewRay = cameraPosition - lightPosition;
	float specularPower = 5;
	
	vec3 result = reflectedRay + viewRay;
	for(int i = 0; i <= 5; i++)
	{
		result *= (reflectedRay = viewRay);
	}
	vec4 specular = vColor * vec4(result, 1) * lightColor;
	FragColor = ambient + diffuse + specular;
}*/

